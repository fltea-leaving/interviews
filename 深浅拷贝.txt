## 深浅拷贝
  是以拷贝时拷贝数据的操作来区分，如果引用类型拷贝的是引用地址，那就是浅拷贝，否则是深拷贝。即区别是复制的是引用(地址)还是复制的是实例

  涉及资料点：
  1、类型判断
  2、递归操作
  3、已存在fun

### 类型判断
  ECMAScript 中变量类型分为两种类型
  基本类型：undefined null 布尔值(Boolean) 字符串(String) 数值(Number)
  引用类型：统称Object 有Object类型 Array类型 Date类型 Function类型等

  基本数据类型存储在栈内存，引用类型存储在堆内存，栈内存存储引用类型的引用地址。
  基本数据类型在复制时会把值复制给新变量，修改新变量时互不影响；引用类型则是把引用地址复制给新变量，两个变量指向同一个引用地址，修改时互相影响；也就是复制只会复制栈内存存储的东西给新变量。即为浅拷贝。

  typeof
    typeof obj ===> 'string' 'object' 'boolean' 'number' 'undefined' 'function'

  instanceof
    a instanceof b ===> true or false
    li. a instanceof Array

  constructor
    constructor 属性返回对创建此对象的数组函数的引用
    [].constructor ===> function Array()…
    li. [].constructor === Array ===> true

    判断对象是否是数组的另外方法：
      特性判断
        Object.prototype.propertyIsEnumerable()方法返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性。

        code:
        function isArray(object){
          return  object && typeof object==='object' &&
            typeof object.length==='number' &&
            typeof object.splice==='function' &&
             //判断length属性是否是可枚举的 对于数组 将得到false
            !(object.propertyIsEnumerable('length'));
        }


      Object.prototype.toString.call
        方法返回一个表示该对象的字符串。从JavaScript 1.8.5开始，用null调用toString()方法会返回[object Null]，类似的用undefined调用会返回[object Undefined]

        code:
        var class2type = {},     //用于记录[object class]样式
        objs = "Boolean Number String Function Array Date RegExp Null Undefined".split(" ");
        for (var i = 0, l = objs.length; i < l; i++) {
          class2type[ "[object " + objs[i] + "]" ] = objs[i].toLowerCase();
        }

        function type(obj) {
          return class2type[ Object.prototype.toString.call(obj) ] || "object";
        }


### 递归操作
  可以通过自定义方法利用递归来进行深拷贝，对属性中所有引用类型的值，遍历到是基本类型的值为止。
  code：
    function deepClone(source){
      if(!source && typeof source !== 'object'){
        throw new Error('error atguments','shallowClone');
      }

      var targetObj = source.constructor === Array ? [] :{};
      for(var keys in source){
        if(source.hasOwnProperty(keys)){
          if(source[keys] && typeof source[keys] === 'object'){
            targetObj[keys] = source[keys].constructor === Array ?[] : {};
            targetObj = deepClone(source[keys]);
          }else{
          tergetObj[keys] = source[keys];
          }
        }
      }
      return targetObj ;
    }

### 已存在fun
  Array 的 slice concat
    两者都会返回一个新的数组实例。
  jQuery中的 extend
  可以用来扩展对象，这个方法可以传入一个参数:deep(true or false)，表示是否执行深复制(如果是深复制则会执行递归复制)。

  array 的 slice concat 和 extend 的浅拷贝 都会深拷贝第一层，底层则是复制引用（浅拷贝）；
  extend 的深拷贝则会在第二层进行递归

  JSON 的parse stringify
    stringify 会降obj序列化为JSON 字符串 ，parse 把 JSON 字符串反序列化为js对象 ，实现深拷贝

  Object.assign
  跟extend用法差不多，深拷贝第一层，底层则是复制引用（浅拷贝）